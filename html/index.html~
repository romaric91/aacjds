<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìä Dashboard AAC Loans</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/plotly.js/2.26.0/plotly.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }

        .upload-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .file-input-wrapper {
            position: relative;
            display: inline-block;
            margin: 20px 0;
        }

        .file-input {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-input-button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px 30px;
            border-radius: 50px;
            border: none;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .file-input-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 30px rgba(102, 126, 234, 0.4);
        }

        .main-content {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 30px;
            align-items: start;
        }

        .sidebar {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 20px;
        }

        .sidebar h3 {
            color: #667eea;
            margin-bottom: 20px;
            font-size: 1.2em;
        }

        .filter-group {
            margin-bottom: 25px;
        }

        .filter-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        select, input[type="range"] {
            width: 100%;
            padding: 10px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            margin: 10px 0;
        }

        .checkbox-group input[type="checkbox"] {
            margin-right: 10px;
            width: 18px;
            height: 18px;
            accent-color: #667eea;
        }

        .content {
            display: grid;
            gap: 30px;
        }

        .chart-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        .chart-section h2 {
            color: #667eea;
            margin-bottom: 15px;
            font-size: 1.5em;
        }

        .stats {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: 600;
        }

        .slider-container {
            margin: 20px 0;
        }

        .slider-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .slider {
            width: 100%;
            height: 6px;
            background: #e1e5e9;
            border-radius: 3px;
            outline: none;
            -webkit-appearance: none;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            background: #667eea;
            border-radius: 50%;
            cursor: pointer;
        }

        .slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            background: #667eea;
            border-radius: 50%;
            cursor: pointer;
            border: none;
        }

        .chart-container {
            height: 500px;
            margin-top: 20px;
        }

        .hidden {
            display: none;
        }

        @media (max-width: 1024px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .sidebar {
                position: static;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä Emprunts Visualisation de Donn√©es</h1>
        </div>

        <div class="upload-section">
            <h3>T√©l√©verser votre fichier CSV</h3>
            <div class="file-input-wrapper">
                <input type="file" id="csvFile" class="file-input" accept=".csv" />
                <button class="file-input-button">Choisir un fichier CSV</button>
            </div>
            <div id="fileInfo" class="hidden"></div>
        </div>

        <div id="mainContent" class="main-content hidden">
            <div class="sidebar">
                <h3>üóìÔ∏è Filtre par dates</h3>
                <div class="filter-group">
                    <label for="yearSelect">Ann√©e</label>
                    <select id="yearSelect">
                        <option value="Tous">Tous</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="monthSelect">Mois</label>
                    <select id="monthSelect">
                        <option value="Tous">Tous</option>
                        <option value="Janvier">Janvier</option>
                        <option value="F√©vrier">F√©vrier</option>
                        <option value="Mars">Mars</option>
                        <option value="Avril">Avril</option>
                        <option value="Mai">Mai</option>
                        <option value="Juin">Juin</option>
                        <option value="Juillet">Juillet</option>
                        <option value="Ao√ªt">Ao√ªt</option>
                        <option value="Septembre">Septembre</option>
                        <option value="Octobre">Octobre</option>
                        <option value="Novembre">Novembre</option>
                        <option value="D√©cembre">D√©cembre</option>
                    </select>
                </div>

                <h3>‚úÖ Statut de l'emprunt</h3>
                <div class="checkbox-group">
                    <input type="checkbox" id="ongoingCheck">
                    <label for="ongoingCheck">En cours</label>
                </div>
                <div class="checkbox-group">
                    <input type="checkbox" id="lateCheck">
                    <label for="lateCheck">En retard</label>
                </div>
            </div>

            <div class="content">
                <div class="chart-section">
                    <h2>ü•ß Emprunts par utilisateur</h2>
                    <div id="userStats" class="stats"></div>
                    <div class="slider-container">
                        <div class="slider-label">
                            <span>Nombre d'emprunteurs √† afficher</span>
                            <span id="userSliderValue">15</span>
                        </div>
                        <input type="range" id="userSlider" class="slider" min="3" max="30" value="15">
                    </div>
                    <div id="userChart" class="chart-container"></div>
                </div>

                <div class="chart-section">
                    <h2>ü•ß Fr√©quence d'emprunts par jeu</h2>
                    <div id="gameStats" class="stats"></div>
                    <div class="slider-container">
                        <div class="slider-label">
                            <span>Nombre de jeux √† afficher</span>
                            <span id="gameSliderValue">15</span>
                        </div>
                        <input type="range" id="gameSlider" class="slider" min="3" max="30" value="15">
                    </div>
                    <div id="gameChart" class="chart-container"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let originalData = [];
        let filteredData = [];

        const monthsMap = {
            'Janvier': 1, 'F√©vrier': 2, 'Mars': 3, 'Avril': 4, 'Mai': 5, 'Juin': 6,
            'Juillet': 7, 'Ao√ªt': 8, 'Septembre': 9, 'Octobre': 10, 'Novembre': 11, 'D√©cembre': 12
        };

        // File upload handling
        document.getElementById('csvFile').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                Papa.parse(file, {
                    header: true,
                    delimiter: ';',
                    complete: function(results) {
                        originalData = processData(results.data);
                        setupFilters();
                        updateCharts();
                        document.getElementById('mainContent').classList.remove('hidden');
                        document.getElementById('fileInfo').innerHTML = `‚úÖ Fichier charg√©: ${file.name}`;
                        document.getElementById('fileInfo').classList.remove('hidden');
                    }
                });
            }
        });

        function processData(data) {
            const today = new Date();
            return data.map(row => {
                // Parse dates
                const dateDebut = row['Date d√©but'] ? new Date(row['Date d√©but']) : null;
                const dateFin = row['Date fin'] ? new Date(row['Date fin']) : null;
                const dateRetour = row['Date retour'] ? new Date(row['Date retour']) : null;

                // Calculate late status
                const late = dateFin && dateFin < today && row['Status'] === 'Pr√™t√©' ? 1 : 0;

                return {
                    ...row,
                    'Date d√©but': dateDebut,
                    'Date fin': dateFin,
                    'Date retour': dateRetour,
                    'late': late
                };
            });
        }

        function setupFilters() {
            // Setup year filter
            const years = [...new Set(originalData
                .filter(row => row['Date d√©but'])
                .map(row => row['Date d√©but'].getFullYear())
            )].sort();

            const yearSelect = document.getElementById('yearSelect');
            years.forEach(year => {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearSelect.appendChild(option);
            });

            // Add event listeners
            document.getElementById('yearSelect').addEventListener('change', applyFilters);
            document.getElementById('monthSelect').addEventListener('change', applyFilters);
            document.getElementById('ongoingCheck').addEventListener('change', applyFilters);
            document.getElementById('lateCheck').addEventListener('change', applyFilters);
            document.getElementById('userSlider').addEventListener('input', updateUserChart);
            document.getElementById('gameSlider').addEventListener('input', updateGameChart);

            applyFilters();
        }

        function applyFilters() {
            filteredData = originalData.filter(row => {
                // Year filter
                const selectedYear = document.getElementById('yearSelect').value;
                if (selectedYear !== 'Tous' && row['Date d√©but']) {
                    if (row['Date d√©but'].getFullYear() !== parseInt(selectedYear)) {
                        return false;
                    }
                }

                // Month filter
                const selectedMonth = document.getElementById('monthSelect').value;
                if (selectedMonth !== 'Tous' && row['Date d√©but']) {
                    if (row['Date d√©but'].getMonth() + 1 !== monthsMap[selectedMonth]) {
                        return false;
                    }
                }

                // Status filters
                const ongoingCheck = document.getElementById('ongoingCheck').checked;
                if (ongoingCheck && row['Status'] !== 'Pr√™t√©') {
                    return false;
                }

                const lateCheck = document.getElementById('lateCheck').checked;
                if (lateCheck && row['late'] !== 1) {
                    return false;
                }

                return true;
            });

            updateCharts();
        }

        function updateCharts() {
            updateUserChart();
            updateGameChart();
        }

        function updateUserChart() {
            const maxValues = parseInt(document.getElementById('userSlider').value);
            document.getElementById('userSliderValue').textContent = maxValues;

            const userCounts = {};
            let validLoans = 0;

            filteredData.forEach(row => {
                if (row['Emprunteur nom']) {
                    userCounts[row['Emprunteur nom']] = (userCounts[row['Emprunteur nom']] || 0) + 1;
                    validLoans++;
                }
            });

            const uniqueUsers = Object.keys(userCounts).length;
            document.getElementById('userStats').textContent = 
                `${validLoans} emprunts de ${uniqueUsers} Emprunteurs uniques`;

            const sortedUsers = Object.entries(userCounts)
                .sort((a, b) => b[1] - a[1])
                .slice(0, maxValues);

            const data = [{
                values: sortedUsers.map(([name, count]) => count),
                labels: sortedUsers.map(([name, count]) => name),
                type: 'pie',
                hole: 0.3,
                textinfo: 'label+value',
                textposition: 'outside',
                marker: {
                    line: { color: 'white', width: 1 }
                }
            }];

            const layout = {
                title: `Top ${maxValues} emprunteurs les plus fr√©quents`,
                showlegend: false,
                margin: { t: 60, b: 60, l: 60, r: 60 },
                font: { family: 'Arial, sans-serif', size: 12 }
            };

            Plotly.newPlot('userChart', data, layout, { responsive: true });
        }

        function updateGameChart() {
            const maxValues = parseInt(document.getElementById('gameSlider').value);
            document.getElementById('gameSliderValue').textContent = maxValues;

            const gameCounts = {};
            let validLoans = 0;

            filteredData.forEach(row => {
                if (row['Titre']) {
                    gameCounts[row['Titre']] = (gameCounts[row['Titre']] || 0) + 1;
                    validLoans++;
                }
            });

            const uniqueGames = Object.keys(gameCounts).length;
            document.getElementById('gameStats').textContent = 
                `${validLoans} emprunts de ${uniqueGames} jeux uniques`;

            const sortedGames = Object.entries(gameCounts)
                .sort((a, b) => b[1] - a[1])
                .slice(0, maxValues);

            const data = [{
                values: sortedGames.map(([name, count]) => count),
                labels: sortedGames.map(([name, count]) => name),
                type: 'pie',
                hole: 0.3,
                textinfo: 'label+value',
                textposition: 'outside',
                marker: {
                    line: { color: 'white', width: 1 }
                }
            }];

            const layout = {
                title: `Top ${maxValues} jeux les plus fr√©quents`,
                showlegend: false,
                margin: { t: 60, b: 60, l: 60, r: 60 },
                font: { family: 'Arial, sans-serif', size: 12 }
            };

            Plotly.newPlot('gameChart', data, layout, { responsive: true });
        }
    </script>
</body>
</html>
